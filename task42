%include "../../include/io.mac"
extern array_idx_2      ;; int array_idx_2
extern printf
section .text
    global inorder_intruders

;   struct node {
;       int value;
;       struct node *left;
;       struct node *right;
;   } __attribute__((packed));

;;  inorder_intruders(struct node *node, struct node *parent, int *array)
;       functia va parcurge in inordine arborele binar de cautare, salvand
;       valorile nodurilor care nu respecta proprietatea de arbore binar
;       de cautare: |node->value > node->left->value, daca node->left exista
;                   |node->value < node->right->value, daca node->right exista
;
;    @params:
;        node   -> nodul actual din arborele de cautare;
;        parent -> tatal/parintele nodului actual din arborele de cautare;
;        array  -> adresa vectorului unde se vor salva valorile din noduri;

; ATENTIE: DOAR in frunze pot aparea valori gresite!
;          vectorul array este INDEXAT DE LA 0!
;          Cititi SI fisierul README.md din cadrul directorului pentru exemple,
;          explicatii mai detaliate!

; HINT: folositi variabila importata array_idx_2 pentru a retine pozitia
;       urmatorului element ce va fi salvat in vectorul array.
;       Este garantat ca aceasta variabila va fi setata pe 0 la fiecare
;       test al functiei inorder_intruders.      

inorder_intruders:
    enter 0, 0

    mov edx, [ebp+8] ; nodul actual
    mov eax , [ebp + 12] ; parent
    mov edi, [ebp + 16] ; arr
    ;pop eax
    ;pop edx
     
    ;PRINTF32 `---nod inceput-- %d\n\x0`, dword[edi]
     cmp edx, 0
    je bye_bye
    ;push eax
   
   PRINTF32 `---nod inceput-- %d \n\x0`, dword[edx]
   mov eax, edx ;mut pointerul curent
   mov edx, [edx + 4] ; ma duc pe copilu stang

   push edi ; arr
   push eax
   push edx
   call inorder_intruders
   add esp, 12

   mov edx, [ebp+8] ; nodul actual
    mov eax , [ebp + 12] ; parent
    mov edi, [ebp + 16] ; arr
   ; cmp eax,0
   ; je bye_bye
   ; cmp edx, 0
    ;je bye_bye

     ; PRINTF32 `---nod parinte +copil-- %d %d\n\x0`, dword[eax], dword [edx]
      cmp eax,0
   je bye_bye
     push edx
      cmp [eax+4], 0
      je bye_bye
      

   pop edx


    mov eax, edx
    mov edx, [edx + 8]

    push edi
    push eax
    push edx
    call inorder_intruders
    add esp, 12


    
    
bye_bye:
   PRINTF32 `-am ajuns la final\n\x0`
    ;leave
    ;ret
   leave
    ret
