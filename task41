extern array_idx_1      ;; int array_idx_1
section .text
    global inorder_parc

;   struct node {
;       int value;
;       struct node *left;
;       struct node *right;
;   } __attribute__((packed));

;;  inorder_parc(struct node *node, int *array);
;       functia va parcurge in inordine arborele binar de cautare, salvand
;       valorile nodurilor in vectorul array.
;    @params:
;        node  -> nodul actual din arborele de cautare;
;        array -> adresa vectorului unde se vor salva valorile din noduri;

; ATENTIE: vectorul array este INDEXAT DE LA 0!
;          Cititi SI fisierul README.md din cadrul directorului pentru exemple,
;          explicatii mai detaliate!
; HINT: folositi variabila importata array_idx_1 pentru a retine pozitia
;       urmatorului element ce va fi salvat in vectorul array.
;       Este garantat ca aceasta variabila va fi setata pe 0 la fiecare
;       test.

inorder_parc:
    enter 0, 0

    mov edx, [ebp+8]
    mov eax , [ebp + 12]
    ;pop eax
    ;pop edx
     
    ;PRINTF32 `---nod inceput-- %d\n\x0`, dword[edi]
     cmp edx, 0
    je bye_bye
    ;push eax
   
   ;PRINTF32 `---nod inceput-- %d\n\x0`, dword[edi]
    mov edx, [edx + 4]
   
    push eax
    push edx
    call inorder_parc
    ;pop ecx 
    ;pop ecx
    add esp,8
    ; PRINTF32 `BRUUUH \n\x0`
     xor ecx, ecx
     mov edx, [ebp+8]
    mov eax , [ebp + 12]
     
   

     ;PRINTF32 `sunt pe dreapta si cat e ary %d\n\x0`, [array_idx_1]
     mov ecx, [array_idx_1]
    ; PRINTF32 `cat e ecxi %d\n\x0`, ecx
     mov esi,dword[edx]
     mov [eax + ecx*4], esi
    ;PRINTF32 `am pus in vector %d\n\x0`,esi
    ; move in eax the value of node
    ; go for right node recursively 
     inc dword[array_idx_1]
    
     mov edx, [edx+8]
    push eax
    push edx
    call inorder_parc
    add esp,8

bye_bye:
   ;PRINTF32 `-am ajuns la final\n\x0`
    ;leave
    ;ret
    leave
    ret
