global get_words
global compare_func
global sort
extern strtok
extern strlen
extern strcmp
extern qsort

section .data
    separatori db ' ,.', 0 ;pt strtok
    endline db "10", 0
section .text
;comp_func(const void *a, const void *b)
;
compare_func:
        enter 0,0
         ;PRINTF32 `din cmpf ***primul\n\x0`
        mov eax, [ebp + 8]
        mov ecx ,[ebp+ 12]
       ; PRINTF32 `din cmpf *** doi\n\x0`

        mov eax, dword [eax] ; char**
        mov ecx, dword [ecx]

        ;mov eax, [eax] ; (char *) ->seg fault
        ;mov ecx, [ecx]

        ;PRINTF32 `din cmpf %s %s\n\x0`, eax, ecx

        push eax
        push ecx

        push eax
        call strlen
        add esp,4
        ;PRINTF32 `din cmpf %d\n\x0`, eax

        mov edx, eax
        ;PRINTF32 `din cmpf %dsi ec e: %s\n\x0`, edx, ecx
        xor eax,eax

        pop ecx
        push ecx
        push edx
        push ecx
        call strlen
        add esp,4
        pop edx
        ;PRINTF32 `din cmpf a si1 d%d %d\n\x0`, eax, edx

        pop ecx
        ;PRINTF32 `e bun ec?  %s\n\x0`, ecx
        cmp edx, eax ; lungimile 
        je stringurile_sunt_egale
        sub edx, eax
        mov eax, edx
        ;PRINTF32 `din cmpf ce returnez %d\n\x0`, eax
        ;pop ecx
        pop ecx ; fostul eax string
        ;PRINTF32 `e bun ec faza doi ?  %s\n\x0`, ecx
        jmp capat

stringurile_sunt_egale:
    ; fac strcmp
    ;PRINTF32 `----am ajuns ind egale---\n\x0`
    ;pop ecx
    pop eax
    ;PRINTF32 `din cmpf egale %s %s\n\x0`, eax, ecx
    push ecx
    push eax
    call strcmp
    add esp,8
    ;PRINTF32 `eticheta egale cat da strcmp %d\n\x0`, eax
    jmp capat

capat:
        leave
        ret
;; sort(char **words, int number_of_words, int size)
;  functia va trebui sa apeleze qsort pentru soratrea cuvintelor 
;  dupa lungime si apoi lexicografix
sort:
    enter 0, 0
    
    mov esi, [ebp + 8]   
    mov edx, [ebp + 12]  
    mov ecx, [ebp + 16]  

    ;PRINTF32 `qsort %d\n %s\n\x0`,  ecx, [esi]
    push compare_func        
    push ecx             
    push edx
    ;push ecx             
    push esi   
    call qsort        
    add esp, 16 

    leave
    ret

;; get_words(char *s, char **words, int number_of_words)
;  separa stringul s in cuvinte si salveaza cuvintele in words
;  number_of_words reprezinta numarul de cuvinte
get_words:
    enter 0, 0

    mov esi, [ebp + 8] ; char *s
    mov edi, [ebp + 12] ; char **words
    mov ecx, [ebp + 16] ; number_of_words

    ;PRINTF32 `%d\n %s\n\x0`, ecx, esi
    xor eax, eax ; nr de cuvinte
    push esi
    pop edx
    ;PRINTF32 `%d\n %s\n\x0`, ecx, edx
caut_tokens:
    cmp eax, ecx
    je gata
   
    cmp eax, 0
    je primul_token
    jmp restul
primul_token:
    push eax
    push ecx
    ;trb salvate 
    
    push separatori
    push edx ; sursa
    call strtok
    add esp, 8

    ;PRINTF32 `after strtok %s %s\n\x0`, eax, edx

    pop ecx
    pop eax
    mov [edi + 4*eax], edx
    ;mov ebx, [edi + 4*eax]
     ;PRINTF32 `ce am i matrice %s\n\x0`, [edi + 4*eax]
    inc eax
    jmp caut_tokens
restul:
   push eax
   push ecx

   push separatori
   push 0
   call strtok
   add esp,8
   ;PRINTF32 `after strtok %s\n\x0`, eax

   pop ecx
   pop eax
   mov [edi + 4*eax], edx
   ;ce pana mea are ebx de da seg fault???!
    ;PRINTF32 `ce am i matrice %s\n\x0`, [edi + 4*eax]
   inc eax
   jmp caut_tokens
gata:
    leave
    ret
